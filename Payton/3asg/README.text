#!/afs/cats.ucsc.edu/courses/cmps112-wm/usr/smalltalk/bin/gst -f


|is_debug is_compress is_uncompress is_display 
file_name infile root outfile istream ostream encoding ptr| 
optError := false.
nl := Character nl.

"--------------------------------------------------------------------"
"checking the correct number of arguments"
"--------------------------------------------------------------------"
(Smalltalk arguments size) > 3 ifTrue: [
       status := 127.
       stderr << 'Usage: ' << 'Too many arguments ' << status << nl.
       ObjectMemory quit: status.
   ].
(Smalltalk arguments size) < 2 ifTrue: [
       status := 127.
       stderr << 'Usage: ' << 'Too few arguments ' << status << nl.
       ObjectMemory quit: status.
   ].

"--------------------------------------------------------------------"
"creating our I/O stream, defaults to STDOUT if no outfile specified"
"--------------------------------------------------------------------"
outFile := ''.
|oFile|
(Smalltalk arguments size) = 3 ifTrue: [
   outFile := (Smalltalk arguments at: 3).
   oFile := FileStream open: outFile
                    mode: FileStream write. ]. 
(Smalltalk arguments size) = 2 ifTrue: [ oFile := stdout. ].

inFile := (Smalltalk arguments at: 2).
FileStream extend [
   nl := Character nl.
   catFile [
      |count|
      count := 0.
      [self atEnd not] whileTrue: [
         count := count + 1.
         count asString size to: 5 do: [:skip| stdout << ' '].
         stdout << count << ': ' << self nextLine << nl.
      ]
   ]
]
|iFile|
iFile := FileStream open: inFile
                    mode: FileStream read.
"iFile catFile."
iReset := [
    iFile close.
    iFile := FileStream open: inFile
                        mode: FileStream read.
].

FileStream extend [
  nl := Character nl.
   buildTable: table [
      [self atEnd not] whileTrue: [
        table incr: self next asInteger.
      ]
   ]
]

Character extend [
   isPrint [
      ^ (Character space <= self) & (self <= $~)
   ]
   visible [
      self isPrint ifTrue: [^ '$', self asString]
                   ifFalse: [^ self asInteger printStringRadix: 8]
   ]
]

Object subclass: OutBits [
   |bitIndex currentByte myStream|
   OutBits class >> new [
      self shouldNotImplement.
   ]
   OutBits class >> new: fileStream [
      |result|
      result := super new.
      result init: fileStream.
      ^result
   ]
   clearByte [
      bitIndex := 8.
      currentByte := 0.
   ]
   init: fileStream [
      myStream := fileStream.
      self clearByte.
   ]
   flushByte [
      bitIndex = 8 ifFalse: [
         myStream nextPutByte: currentByte.
         self clearByte.
      ]
   ]
   writeBit: bit [
      currentByte := currentByte bitAt: bitIndex put: bit.
      bitIndex := bitIndex - 1.
      bitIndex = 0 ifTrue: [self flushByte].
   ]
]

Object subclass: BitStream [
   |bitIndex byte myStream|
   BitStream class >> new: fileStream [
      |result|
      result := super new.
      result init: fileStream.
      ^result
   ]
   init: fileStream [
      myStream := fileStream.
      bitIndex := 1.
   ]
   nextBit [
      bitIndex = 1 ifTrue: [
         byte := myStream next.
         bitIndex := 9.
      ].
      bitIndex := bitIndex - 1.
      ^byte value bitAt: bitIndex
   ]
   atEnd [
      ^bitIndex = 1 and: [myStream atEnd]
   ]
   currByte [
      ^byte
   ]
]

Object subclass: ZeroArray [
   |theArray|

   ZeroArray class >> new [
      self shouldNotImplement.
   ]

   ZeroArray class >> new: size [
      |result|
      result := super new.
      result init: size.
      ^ result
   ]

   init: size [
      theArray := Array new: size.
   ]

   size [
      ^ theArray size.
   ]

   at: index [
      ^ theArray at: index + 1.
   ]

   at: index put: value [
      ^ theArray at: index + 1 put: value.
   ]

   incr: index [
      (self at: index) isNil
         ifTrue: [ self at: index put: 0].
      self at: index put: (self at: index) + 1.
   ]

   keysAndValuesDo: aBlock [
      (0 to: (self size) - 1) do: [:index |
         aBlock value: index value: (self at: index).
      ]
   ]
]

Object subclass: Leaf [
   |char count|
   char [ ^ char ]
   count [ ^ count ]
   isLeaf [ ^true ]
   Leaf class >> new [
      self shouldNotImplement
   ]

   Leaf class >> new: aChar count: aCount [
      |result|
      result := super new.
      result setChar: aChar andCount: aCount.
      ^result
   ]

   setChar: aChar andCount: aCount [
      char := aChar.
      count := aCount.
   ]

   <= other [
      ^ (count < other count)
      | ((count = other count) & (char <= other char))
   ]

   printBase: aStream [
      ^ aStream << self class << '(' << char << ',' << count
   ]

   printOn: aStream [
      (self printBase: aStream) << ')'.
   ]

   dumpTree: outbits [
      outbits writeBit: 0.

      8 to: 1 by: -1 do: [:index |
         outbits writeBit: ((self char asInteger) bitAt: index)].

      char asInteger = 0 ifTrue: [
         outbits writeBit: 0.].
      char asInteger = 256 ifTrue: [
         outbits writeBit: 1.].
   ]

   inorder: visitor prefix: string [
      visitor value: char value: string.
   ]

]

Leaf subclass: Tree [
   |left right|
   isLeaf [ ^false ]
   Tree class >> new: aChar count: aCount [
      self shouldNotImplement
   ]
   
   getRight [ ^right ]
   getLeft [ ^left ]

   Tree class >> new: aChar count: aCount left: aLeft right: aRight [
      |result|
      result := super new: aChar count: aCount.
      result setLeft: aLeft andRight: aRight.
      ^ result
   ]

   setLeft: aLeft andRight: aRight [
      left := aLeft.
      right := aRight.
   ]

   printOn: aStream [
      (self printBase: aStream) << ',' << left << ',' << right << ')'.
   ]

   dumpTree: outbits [
      left dumpTree: outbits.
      right dumpTree: outbits.
      outbits writeBit: 1.
   ]

   inorder: visitor prefix: string [
      left inorder: visitor prefix: string, '0'.
      right inorder: visitor prefix: string, '1'.
   ]

]

